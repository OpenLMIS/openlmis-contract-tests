plugins {
    id "com.github.samueltbrown.cucumber" version "0.9"
}

apply plugin: 'java'

project.ext {
    cucumberVersion = '1.2.4'
    junitVersion = '4.12'
    restAssuredVersion = '3.0.0'
}

dependencies {
    compile 'org.postgresql:postgresql:9.4.1211'
    compile 'com.ibatis:ibatis2-common:2.1.7.597'
    testCompile 'io.rest-assured:rest-assured:' + restAssuredVersion
    testCompile 'info.cukes:cucumber-java:' + cucumberVersion
    testCompile 'info.cukes:cucumber-junit:' + cucumberVersion
    testCompile 'junit:junit:' + junitVersion
    testCompile 'org.jglue.fluent-json:fluent-json:2.0.0'
}

repositories {
    mavenCentral()
}

cucumber {
    formats = ['pretty', 'html:build/cucumber', 'junit:build/cucumber/junit/test_report.xml']
    glueDirs = ['src/cucumber/']
    featureDirs = ['src/cucumber/resources/']

    def tagsArgs = project.getProperty('tags')
    if (tagsArgs != null) {
        tags = tagsArgs.split(',')
    }
}

task waitFor {
    if(project.hasProperty('containers')) {
        def containers = project.getProperty('containers').split(',')
        println "waiting for " + containers + " to be started up and serving"

        for (container in containers) {
            if (!isReachable(container)) {
                throw new GradleException('timed out waiting for ' + container)
            }
        }
    }
}

private boolean isReachable(container) {
    boolean isRequestSuccessFul = false

    for (def i = 0; i < 20; i++) {
        println("trying $container ${i + 1} times")

        def response = ""
        try {
            response = new URL(container).text
            println response
        } catch (Exception e) {
            println "request failed"
        }

        if (response != "") {
            isRequestSuccessFul = true;
            break
        } else {
            sleep(5000)
        }
    }

    return isRequestSuccessFul
}