apply plugin: 'java'
apply plugin: 'idea'

dependencies {
    compile 'org.postgresql:postgresql:9.4.1211'
    compile 'com.ibatis:ibatis2-common:2.1.7.597'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.json:json:20170516'
    compile 'org.yaml:snakeyaml:1.18'
    compile 'org.projectlombok:lombok:1.18.0'

    testCompile 'io.rest-assured:rest-assured:3.0.0'
    testCompile 'io.cucumber:cucumber-java:3.0.2'
    testCompile 'io.cucumber:cucumber-junit:3.0.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.jglue.fluent-json:fluent-json:2.0.0'
}

repositories {
    mavenCentral()
}

sourceSets {
    test {
        java {
            srcDir 'src/cucumber/java'
        }
        resources {
            srcDir 'src/cucumber/resources'
        }

        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

task cucumber(dependsOn: testClasses) {
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
            args = [
                    '--monochrome',
                    '--glue', 'classpath:org.openlmis.contract_tests',
                    '--tags', project.getProperty('tags'),
                    '--add-plugin', 'pretty',
                    '--add-plugin', 'html:test-results/html',
                    '--add-plugin', 'json:test-results/cucumber.json',
                    '--add-plugin', 'junit:test-results/cucumber-junit.xml',
                    '--add-plugin', 'pretty:test-results/cucumber-logs',
                    '--add-plugin', 'usage:test-results/cucumber-usage',
                    'src/cucumber/resources/']
        }
    }
}

task waitFor {
    if (project.hasProperty('containers')) {
        def containers = project.getProperty('containers').split(',')
        def waitTime = 30

        println "waiting for " + containers + " to be started up and serving"

        for (container in containers) {
            if (!isReachable(container, waitTime)) {
                throw new GradleException('timed out waiting for ' + container)
            }
        }

        println "Waiting $waitTime more seconds for right assignment regeneration"
        sleep(waitTime * 1000)
    }
}

private boolean isReachable(container, int waitTime) {
    boolean isRequestSuccessFul = false
    def count = (int) (600 / waitTime)

    for (def i = 0; i < count; i++) {
        println("trying $container ${i + 1} times")

        def response = ""
        try {
            response = new URL(container).text
            println response
        } catch (Exception e) {
            println "request failed"
        }

        if (response != "") {
            isRequestSuccessFul = true
            break
        }

        sleep(waitTime * 1000)
    }

    return isRequestSuccessFul
}
